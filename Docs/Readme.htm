<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<title>MCE Controller</title>

<style>
.auto-style2 {
	font-family: "Courier New", Courier, monospace;
}
.auto-style3 {
	border-collapse: separate;
}
.auto-style5 {
	text-align: left;
}
</style>

</head>

<body lang=EN-US>
  <div class=Section1>
    <p class=auto-style5>
	<table style="width: 100%">
		<tr>
			<td valign="top">
    <h1><strong>MCE Controller</strong></h1>
			<p class=auto-style5>Version 1.4.0 - February 11, 2012</p>
    <p class=auto-style5>Copyright © 2012 Kindel Systems, LLC</p>
    <p class=auto-style5><a
    href="http://www.kindel.com/products/mcecontroller">www.kindel.com/products/mcecontroller</a></p>

    <p><a href="mailto:charlie@kindel.com">charlie@kindel.com</a></p>

    <p>This version of MCE Controller is distributed as freeware.
    Donations of any value appreciated.</p>
    <form action="https://www.paypal.com/cgi-bin/webscr" method="post">
    <input type="hidden" name="cmd" value="_s-xclick">
    <input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----
    ">
    <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
    <img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
    
    <h2>License</h2>

    <p>The source code to MCE Controller is available under the BSD
    license. The source code project can be found at <a
    href="http://github.com/tig/mcecontroller">http://github.com/tig/mcecontroller</a>.</p>
    <p>(Note: the source code was recently moved from Sourceforge to GitHub. SourceForge continues to be the place for downloading the latest binary and for getting help & particpating in usage discussions.)</p>

    </form>

    		</td>
			<td valign="top">
			<img alt="" src="MCE%20Controller.png" style="float: right"></td>
		</tr>
	</table>
	  </p>

    <h2>Getting Help</h2>
    For help and support, please visit the <a href="https://sourceforge.net/projects/mcecontroller/forums/forum/464956">MCE Controller forums</a>.

    <h2>Introduction</h2>

    <p>MCE Controller enables the remote control of a Windows PC over the network.  
    It runs in the background on a Windows PC listening on the network for commands. 
    It then translates those commands into actions such as keystrokes, text input, 
    and the starting of programs. For example:</p>
    	<ul>
    		<li>
    		<p>The command &quot;mcestart&quot; will cause the Windows Media Center 
    		application to start. This is equivalent to pressing the green button on 
    		the Windows remote control.</p>
    		</li>
    		<li>
    		<p>The command &quot;maximize&quot; will cause the current window to be maximized 
    		on the display. This is equivalent to choosing the &quot;Maximize&quot; button on 
    		the window's window menu.</p>
    		</li>
    		<li>
    		<p>The command &quot;chars:Hello World!&quot; will cause the text &quot;Hello World&quot; to 
    		be typed, as though it were typed on the keyboard.</p>
    		</li>
    		<li>
    		<p>The command &quot;restart&quot; will cause the computer to restart. This is 
    		equivalent to choosing the restart menu item on the Start menu.</p>
    		</li>
    	</ul>
    	<p>The commands that MCE Controller support is extensible through a 
    	configuration file. If it does not natively support a function you wish, you 
    	can add new commands easily.</p>

    <p>This application was initially developed to enable
    integration of a Windows based home theater PC (HTPC) into a Crestron whole-house audio/video system. However, it
    is general enough that it can be utilized from any control system that supports
    sending text strings to a TCP/IP port. Most control systems, such as Crestron
    or AMX, support IR emitting. For many applications, emitting the MCE IR
    commands will suffice. However, for some installations the reliability of IR
    emitting and other factors may make IR emitting problematic and MCE Controller
    offers a robust solution.</p>

    <p>MCE Controller can act as either a TCP/IP client or server.
    When acting as a client the target host and port can be configured. When acting
    as a server the incoming port can be configured.</p>

    <p>MCE Controller runs showing only a taskbar icon. By double
    clicking on the taskbar a status window is displayed that shows a log of all
    activity. You can also right-click on the taskbar icon for a menu.</p>
    	<p><strong>WARNING:</strong> MCE Controller is inherently insecure. It 
    	effectively will allow anyone with access to your network to remotely 
    	control your PC, potentially gaining full access to it. Use at your own risk 
    	(or contribute to the open source project and add security to it).</p>

    <p>See the <a href="#Revision_History">Revision History</a>
    below for details of what's new in this version.</p>

    <h2>Installation</h2>

    <p>Important Note: MCE Controller requires the
    .NET Framework 3.5. Use <a href="http://windowsupdate.microsoft.com/">Windows
    Update</a> to ensure you have this installed before running MCE Controller.</p>

    <p>Simply run the MCEController
    1.x.x Setup.EXE to install. The following files wil be
    installed in the directory you choose and a start menu item will be added. You can
    un-install MCE Controller either via add/remove programs or by using the Uninstall icon in the MCE
    Controller start menu group.</p>

      <ul>
		  <li>&nbsp;&nbsp;&nbsp;&nbsp;Readme.htm</li>
		  <li>&nbsp;&nbsp;&nbsp;&nbsp;
    MCEControl.exe</li>
		  <li>&nbsp;&nbsp;&nbsp;&nbsp;
    MCEControl.commands </li>
	  </ul>

    <p>Readme.htm is this file. MCEController.exe is the
    program executable and MCEControl.commands
    is an XML file that defines the commands MCE Controller will respond to and
    what actions it will take.</p>

    <p>When MCEControl runs, it defaults to showing itself as only
    a taskbar icon. Double clicking on the taskbar icon will show the
    configuration/status window.</p>

    <p>If you would like it to show it’s configuration/status
    window upon startup, uncheck the “Hide
    Window at Startup” checkbox in the settings dialog.</p>

    <p>Note that all configuration settings are stored in a file
    that will be created in the program directory when MCE Controller is first run.
    The configuration settings file will be named MCEControl.settings .</p>

    <p>You can run multiple instances of MCE Controller. To do so
    simply copy the EXE to a 2nd directory along with the .commands
    file. Each copy will have its own independent MCEControl.settings file.</p>

    <h2>Configuration</h2>

    <p>MCE Controller can act as either a TCP/IP client or server
    (it can actually operate as both simultaneously, but it’s unlikely it would
    ever be useful to do so). By default MCE Controller is configured to act as a
    TCP/IP server listening on port 5150.
    You can change this behavior using the Settings dialog described below.</p>

    <h3>The Client Tab</h3>

    <p>The Client tab in the Settings dialog controls MCE
    Controller’s TCP/IP client functionality. When acting as a client, MCE
    Controller will repeatedly try to connect to the specified port on the
    specified host and wait for commands to be sent from the host. MCE Controller
    sends nothing to the host.</p>

    <ol style='margin-top:0in' start=1 type=1>
     <li>Enable Client. This checkbox enables or disables
         the TCP/IP client functionality. If enabled, the followings settings
         apply: </li>
     <li>Host. This is the IP address or host name of the
         server MCE Controller is to connect to. </li>
     <li>Port. This is the port that MCE Controller will
         connect to. </li>
     <li>Reconnect Wait Time. This is the number of
         milliseconds (default is 20 seconds or 20000 ms) MCE Controller will wait
         before trying to reconnect to the host once a connection has been dropped
         or a connect fails. </li>
    </ol>

    <h3>The Server Tab</h3>

    <p>The Server tab in the Settings dialog controls MCE
    Controller’s TCP/IP server functionality.&nbsp; When acting as a server, MCE
    Controller will open the specified port and wait for a client to connect. When
    a client does connect MCE Controller will wait for incoming commands until the
    client closes the connection.</p>

    <ol style='margin-top:0in' start=1 type=1>
     <li>Enable Server. This checkbox enables or disables
         the TCP/IP server functionality. If enabled, the followings settings
         apply: </li>
     <li>Port. This is the port that MCE Controller will
         listen on. </li>
     <li>Enable Wakeup. If enabled, MCE Controller will
         attempt to connect to the specified host/port, send the “Wakeup command”
         and disconnect when it first starts. When it shuts down it will send the
         “Closing command”. This functionality is useful when the remote client
         needs to be notified that MCE Controller is ready (for example after the
         MCE PC has rebooted).</li>
    </ol>

    <h3>Usage Notes</h3>

    <ol style='margin-top:0in' start=1 type=1>
     <li>See the <a href="#Included_Commands">Included Commands</a>
         section below and the contents of the MCEControl.commands file for a list of
         all of the commands MCEControl supports by default. </li>
     <li>To test MCE Controller (in server mode) open a telnet
         session to whatever port MCE Controller is configured to open and type
         commands. For example telnet
         localhost 5150 followed by alttab and a carriage return will cause
         an “Alt-Tab” keystroke to be generated on the local system. </li>
     <li>The mcestart
         command will launch Media Center and cause it to be maximized. If you do
         not want this behavior, change MCEControl.commands
         such that the mcestart
         command does not have the embedded nextCommand
         element. </li>
     <li>For MCEContoller to work property the target application (Media Center      ) must be the active window (foreground) on the desktop.&nbsp; You can
         use the mceactivate
         command to cause Media Center to be the foreground app if it’s already
         running. Alternatively you can just use mcestart as it will end up causing the
         same thing to happen (although not as quickly). </li>
     <li>Also, you may find that greenbutton is a better function than mcestart because it
         is equivalent to the green-button. mcestart is a bit different because if
         MCE is already running mcestart
         will not go to the &quot;start&quot; screen of MCE while greenbutton will.
         However, greenbutton
         does not cause the MCE window to be maximized.</li>
    </ol>

    <h2><a name="Included_Commands">Included Commands</a></h2>

    <p>The MCEControl.commands
    included with MCE Controller includes a set of default commands for 
	controlling Windows Media Center. See the section below for instructions on how to add, remove, or
    change these commands. Note that there are some other commands in MCEControl.commands text
    such as &quot;notepad&quot; which starts notepad.exe.
    These are there just for illustrative purposes.</p>
	  <p>The File menu includes a menu item that will open the folder containing 
	  the MCEController.commands file so you can use your favorite editor to 
	  change it as you see fit.</p>
	  <p>Please view the contents of MCEController.commands for the definitive 
	  list of default commands. The following forms of commands are supported 
	  (more details can be found in MCEController.commands):</p>
	  <ul>
		  <li><strong>StartProcess </strong>- Starts the specified process. Can 
		  specify the path to an executable, shortcut, or a URI. Supports 
		  embedded nextCommand elements allowing other form of MCE Controller 
		  commands to be invoke after the process starts.</li>
		  <li><strong>SetForgroundWindow</strong> - Causes the specified window 
		  to be brought to the foreground.</li>
		  <li><strong>Shutdown</strong> - Allows the host computer to be 
		  shutdown, restarted, put in standby, or hibernate mode.</li>
		  <li><strong>SendMessage</strong> - Enables the sending of window 
		  messages to windows. E.g. the 'mcemaximize' command causes the Media 
		  Center window to go full screen.</li>
		  <li><strong>SendInput</strong> - Sends keyboard input to the forground 
		  window.</li>
	  </ul>
	  <p>The following table describes additional, special-cased commands that 
	  are supported:</p>

    <blockquote style='margin-top:5.0pt;margin-bottom:5.0pt'>

    <table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="92%"
     style='width:92.0%;border-collapse:collapse' id=table1>
     <tr>
      <td style='padding:.75pt .75pt .75pt .75pt; width: 265px;'>
      <p class=auto-style3>Command</p>
      </td>
      <td width=563 style='width:422.25pt;padding:.75pt .75pt .75pt .75pt'>
      <p class=auto-style3>Description</p>
      </td>
     </tr>
     <tr style='height:4.5pt'>
      <td valign=top style='padding:.75pt .75pt .75pt .75pt;height:4.5pt; width: 265px;' class="auto-style2">
      {any single character}</td>
      <td width=563 valign=top style='width:422.25pt;padding:.75pt .75pt .75pt .75pt;
      height:4.5pt'>
      This is equivalent to a single keypress of a key on the keyboard.&nbsp; For 
      example 'a' will result in the A key being pressed. '1' will result in the '1' 
      key being pressed. There is no difference between sending 'a' and 'A'.&nbsp; 
      Use 'shiftdown:/shiftup:' to simulate the pressing of the shift, control, alt, 
      and windows keys.</td>
     </tr>
     <tr style='height:4.5pt'>
      <td valign=top style='padding:.75pt .75pt .75pt .75pt;height:4.5pt; width: 265px;' class="auto-style2">
      shiftdown:[shift|ctrl|alt|lwin|rwin]</td>
      <td width=563 valign=top style='width:422.25pt;padding:.75pt .75pt .75pt .75pt;
      height:4.5pt'>
      Simulates a keydown event for one of the modifier keys.</td>
     </tr>
     <tr style='height:4.5pt'>
      <td valign=top style='padding:.75pt .75pt .75pt .75pt;height:4.5pt; width: 265px;' class="auto-style2">
      shiftup[shift|ctrl|alt|lwin|rwin]</td>
      <td width=563 valign=top style='width:422.25pt;padding:.75pt .75pt .75pt .75pt;
      height:4.5pt'>
      Simulates a keyup event for one of the modifier keys. <br><br>For example, to 
      simulate the typing of 'Test!' send the following commands:<br>&nbsp;&nbsp; 
      shiftdown:shift<br>&nbsp;&nbsp; t<br>&nbsp;&nbsp; shiftup:shift<br>&nbsp;&nbsp; 
      e<br>&nbsp;&nbsp; s<br>&nbsp;&nbsp; t<br>&nbsp;&nbsp; shiftdown:shift<br>&nbsp;&nbsp; 
      1<br>&nbsp;&nbsp; shiftup:shift<br><br>This scheme can be used as an 
      alternative way of sending ctrl-, alt-, and win- keystrokes.&nbsp; For example 
      to simulate ctrl-s:<br><br>&nbsp;&nbsp; shiftdown:ctrl<br>&nbsp;&nbsp; o<br>&nbsp;&nbsp; 
      shiftup:ctrl&nbsp;
      </td>
     </tr>
     <tr style='height:4.5pt'>
      <td valign=top style='padding:.75pt .75pt .75pt .75pt;height:4.5pt; width: 265px;' class="auto-style2">
      <p class=auto-style3>chars:*</p>
      </td>
      <td width=563 valign=top style='width:422.25pt;padding:.75pt .75pt .75pt .75pt;
      height:4.5pt'>
      <p class=auto-style3>Where * is one or more characters. This is equivalent to 
      typing those characters on the keyboard. E.g. &quot;chars:3&quot; will cause the number 
      3 to be typed as though the user had pressed the 3 key on the keyboard. 
      &quot;chars:Hello&quot; will cause &quot;Hello&quot; to be typed.</p>
      <p class=auto-style3>NOTE: Older versions of MCE Controller suppored a 
      &quot;keys:&quot; command that purported to do the same thing. It never actually worked 
      right and has been replaced with the new &quot;chars:&quot; command. </p>
      </td>
     </tr>
     </table>

    </blockquote>

    <h2>Extending MCE Controller</h2>

    <p>MCE Controller has no dependencies on Windows Media Center; the name is simply a legacy from how it 
    was originally inteneded to be used. All Windows Media Center specific data is encapsulated in
    the MCEControl.commands
    file found in the same directory as MCEControl.exe.
    Therefore, MCE Controller is actually a generic mechanism for sending input and 
    other commands to a Windows based PC over the network. It supports sending any message or keystroke
    and can launch arbitrary processes. </p>

    <p>To utilize this functionality all you have to do is edit the
    MCEControl.commands
    file to suit your needs.</p>

    <p>MCEControl.commands
    supports four types of commands: SendInput
    , SendMessage
    , StartProcess
    , Shutdown , and SetForegroundWindow : </p>

    <ol style='margin-top:0in' start=1 type=1>
     <li><strong>SendInput</strong> commands send
         keystrokes. Any combination of shift, ctrl, alt, and left/right Windows
         keys can be used with any key code. See the winuser.h file in the
         Windows SDK for a definition of all standard VK codes. MCEController uses
         the SendInput ( ) API to send
         keystrokes. Keystrokes go to the foreground window. Use a SetForegroundWindow
         element to set the foreground window to the target app by specifying the
         app’s top-level window class name (e.g. “ehshell ”).<br>
         <br>
         For example, the following causes a Ctrl-P to be send to the foreground
         window, and if that window is Media Center, the My Pictures page to
         appear:<br>
         <br>
         &lt;SendInput
         Cmd=&quot;mypictures&quot; vk=&quot;73&quot; Shift=&quot;false&quot;
         Ctrl=&quot;true&quot; Alt=&quot;false&quot; /&gt;</li>
     <li><strong>SendMessage</strong> commands are just
         that. They cause MCE Controller to send a Windows message using the SendMessage ( ) API to the
         foreground window if no class name is specified, or to a particular window
         if that window’s class is specified.<br>
         <br>
         For example, the following is equivalent to sending a WM_SYSCOMMAND
         with the SC_MAXIMIZE
         flag, causing the window with the class name of “ehshell” to be maximized
         (WM_SYSCOMMAND ==
         247 and SC_MAXIMIZE == 61488):<br>
         <br>
         &lt;SendMessage
         Cmd=&quot;mce_maximize&quot; ClassName=&quot;ehshell&quot;
         Msg=&quot;274&quot; wParam=&quot;61488&quot; lParam=&quot;0&quot; /&gt;</li>
     <li><strong>StartProcess</strong> commands start
         processes. Process commands support chaining using the nextCommand element.
         The embedded command will be executed after the started application starts
         processing windows’ messages.<br>
         <br>
         For example, the following launches Media Center and maximizes it:<br>
         &lt;StartProcess
         Cmd=&quot;mce_start&quot; File=&quot;C:\windows\ehome\ehshell.exe&quot;&gt;<br>
         &nbsp;&nbsp;&nbsp;
         &lt;nextCommand xsi:type=&quot;SendMessage&quot;
         ClassName=&quot;ehshell&quot; Msg=&quot;274&quot; wParam=&quot;61488&quot;
         lParam=&quot;0&quot; /&gt;<br>
         &lt;/StartProcess&gt;</li>
     <li>The <strong>SetForegroundWindow</strong> command sets the specified window
         (using the window’s class name) to the foreground.<br>
         <br>
         For example, the following makes Media Center the foreground Window
         (assuming Media Center is running):<br>
         <br>
         &lt;SetForegroundWindow
         Cmd=&quot;mce_activate&quot; ClassName=&quot;ehshell&quot;/&gt; </li>
    </ol>

    <p>You can also edit MCEControl.commands
    to change the text string associated with a particular command. </p>
    	<p>Note that MCE Controller supports the &quot;chars:&quot; command in addition to the 
    	commands defined in MCEControl.commands.</p>
    	<p>Also note that you should not make commands a single character or it will 
    	interfere with the ability to simulate individual character key presses.</p>

    <h2>Future Version Ideas</h2>

    <p>Below is a list of some of the things I’m considering adding
    to MCE Controller in the future. If you like these ideas, or have others that
    you’d like to see implemented, please post feedback on the 
	<a href="https://sourceforge.net/projects/mcecontroller/forums">MCE
    Controller forums</a>.</p>

    <ol style='margin-top:0in' start=1 type=1>
     <li>Windows MCE supports a technology that allows external
         applications to be notified of state changes within MCE. For example, what
         music track is currently playing, or what channel on live TV is currently
         active. MCE Controller could be enhanced to support relaying this state
         information over the network to other devices. </li>
     <li>MCE Controller currently has about 20% the functionality
         of Girder. Given the current architectural model of MCE Controller, I
         could easily extend it to support much of what Girder can do such as
         scripting, supporting other input and output mechanisms, etc… I’ve toyed
         with the idea of turning MCE Controller into a Girder alternative for
         general purpose AV device integration. </li>
     <li>Security. Right now there is no security on the port that
         MCE Controller opens when in server mode. If you are concerned about this
         you can use MCE Controller in client mode. I’ve considered adding
         security, however one of the reasons I wrote MCE Controller was that
         Girder’s iserver functionality requires the use of a security mechanism
         which makes it very hard to use from a control system such as Crestron…</li>
    </ol>

    <h2><a name="Revision_History">Revision History</a></h2>

    <ul style='margin-top:0in' type=disc>
     <li>Version 1.0.1 (February 22, 2004) – First publicly
         released version. </li>
     <li>Verison 1.0.2 (March 24, 2004) - New features: </li>
     <ul style='margin-top:0in' type=circle>
      <li>Added support for system shutdown, restart,&nbsp;standby,
          and hibernate (the Shutdown command
          type). </li>
      <li>Renamed a few commands (&quot;mce_start&quot; is now
          &quot;mcestart&quot; for example) to be more consistent.</li>
     </ul>
     <li>Verison 1.0.3 (March 26, 2004) - Added installer. </li>
     <li>Version 1.0.4 (February 26, 2005) - Fixed bug that caused
         MCE Controller to prevent logoffs and shutdowns.</li>
     <li>Version 1.0.5 (April, 2005) – Added support for arbitrary
         # of characters for the “key:” command.</li>
     <li>Verison 1.1.0 (May 11, 2005) – No functional changes.
         Changed the source license to the MIT License and posted on Sourceforge.</li>
    	<li>Version 1.3.0 (January 3, 2012) – Added support for &quot;chars:&quot;. Removed 
    	support for &quot;keys:&quot;. Added &quot;enter&quot; command. Now builds with VS2010.</li>
      <li>Version 1.3.1 (January 4, 2012) – Fixed bug parsing -1 in the lParam of SendMessageCommands. Commented MCEController.commands. Minor code cleanup.</li>
    	<li>Version 1.3.2 (January 4, 2012) – Fixed bug in how .commands and 
    	.settings are stored (Win7 broke permissions). </li>
    	<li>Version 1.3.3 (January 9, 2012) – Added capability to send individual 
    	key presses with shift/ctrl/alt/win modifiers (what keys: originally was 
    	supposed to do). </li>
      <li>Version 1.4.0 (February 11, 2012) - Server now supports any number of client connections. Expanded MCEController.commands to include commands used by iRule (http://iruleathome.com). Updated About Box & Help menu to reflect move to GitHub. 
	  Added menu item to open directory containing MCEController.commands.</li>
    </ul>
  </div>

</body>

</html>
