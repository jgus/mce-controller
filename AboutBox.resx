<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="_pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>